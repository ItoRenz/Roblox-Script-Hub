--[[
    ═══════════════════════════════════════════════════════════
    🎮 ROBLOX SCRIPT HUB - OPTIMIZED COMPACT LAYOUT
    ═══════════════════════════════════════════════════════════
    
    Author: ItoRenz00
    Version: 1.0.0
    Description: A compact, responsive script hub with hamburger menu
    
    Features:
        - 👁 Hide Title (Hide player name displays)
        - 👤 Hide Players (Make other players invisible)
        - 📱 Hide All UI (Hide all ScreenGui elements)
        - 📱💻 Mobile & PC responsive design
        - 🍔 Smooth hamburger menu animations
        - 🧹 Auto cleanup system
        - 🛡️ Full error protection
    
    Installation:
        Place as LocalScript in StarterGui or StarterPlayerScripts
    
    100% ERROR FREE - ALL CONNECTIONS PROTECTED
    ═══════════════════════════════════════════════════════════
]]

-- ═══════════════════════════════════════════════════════════
--  📦 SERVICES & VARIABLES
-- ═══════════════════════════════════════════════════════════

local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

local isMobile = UserInputService.TouchEnabled and not UserInputService.KeyboardEnabled

-- ═══════════════════════════════════════════════════════════
--  📦 MAIN SCREENGUI
-- ═══════════════════════════════════════════════════════════

local screenGui = Instance.new("ScreenGui")
screenGui.Name = "ScriptHubGui"
screenGui.ResetOnSpawn = false
screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
screenGui.DisplayOrder = 999999
screenGui.Parent = PlayerGui

-- ═══════════════════════════════════════════════════════════
--  🍔 HAMBURGER TOGGLE BUTTON
-- ═══════════════════════════════════════════════════════════

local toggleButton = Instance.new("TextButton")
toggleButton.Name = "HubToggle"
toggleButton.Size = isMobile and UDim2.new(0, 25, 0, 25) or UDim2.new(0, 30, 0, 30)
toggleButton.Position = isMobile and UDim2.new(1, -35, 0, 5) or UDim2.new(1, -37, 0, 10)
toggleButton.BackgroundColor3 = Color3.fromRGB(88, 101, 242)
toggleButton.BorderSizePixel = 0
toggleButton.Text = ""
toggleButton.ZIndex = 100
toggleButton.Parent = screenGui

local toggleCorner = Instance.new("UICorner")
toggleCorner.CornerRadius = UDim.new(0, 6)
toggleCorner.Parent = toggleButton

local toggleGradient = Instance.new("UIGradient")
toggleGradient.Color = ColorSequence.new{
    ColorSequenceKeypoint.new(0, Color3.fromRGB(88, 101, 242)),
    ColorSequenceKeypoint.new(1, Color3.fromRGB(114, 137, 218))
}
toggleGradient.Rotation = 45
toggleGradient.Parent = toggleButton

-- Hamburger lines container
local hamburgerContainer = Instance.new("Frame")
hamburgerContainer.Name = "HamburgerContainer"
hamburgerContainer.Size = UDim2.new(0, isMobile and 13 or 18, 0, isMobile and 9 or 13)
hamburgerContainer.Position = UDim2.new(0.5, isMobile and -6.5 or -9, 0.5, isMobile and -4.5 or -6.5)
hamburgerContainer.BackgroundTransparency = 1
hamburgerContainer.ZIndex = 101
hamburgerContainer.Parent = toggleButton

local function createHamburgerLine(name, position)
    local line = Instance.new("Frame")
    line.Name = name
    line.Size = UDim2.new(1, 0, 0, isMobile and 1.5 or 2)
    line.Position = position
    line.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    line.BorderSizePixel = 0
    line.ZIndex = 102
    line.Parent = hamburgerContainer
    
    local lineCorner = Instance.new("UICorner")
    lineCorner.CornerRadius = UDim.new(0, 1)
    lineCorner.Parent = line
    
    return line
end

local topLine = createHamburgerLine("TopLine", UDim2.new(0, 0, 0, 0))
local middleLine = createHamburgerLine("MiddleLine", UDim2.new(0, 0, 0.5, isMobile and -0.75 or -1))
local bottomLine = createHamburgerLine("BottomLine", UDim2.new(0, 0, 1, isMobile and -1.5 or -2))

local toggleShadow = Instance.new("Frame")
toggleShadow.Size = UDim2.new(1, 4, 1, 4)
toggleShadow.Position = UDim2.new(0, -2, 0, -2)
toggleShadow.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
toggleShadow.BackgroundTransparency = 0.7
toggleShadow.BorderSizePixel = 0
toggleShadow.ZIndex = 99
toggleShadow.Parent = toggleButton

local shadowCorner = Instance.new("UICorner")
shadowCorner.CornerRadius = UDim.new(0, 6)
shadowCorner.Parent = toggleShadow

-- ═══════════════════════════════════════════════════════════
--  📋 MENU PANEL (POSITIONED BELOW TOGGLE BUTTON)
-- ═══════════════════════════════════════════════════════════

local menuWidth = isMobile and 135 or 200
local menuHeight = isMobile and 140 or 200
local menuPosX = isMobile and -140 or -225
local menuPosY = isMobile and 35 or 45

local menuFrame = Instance.new("Frame")
menuFrame.Name = "MenuPanel"
menuFrame.Size = UDim2.new(0, menuWidth, 0, 0)
menuFrame.Position = UDim2.new(1, menuPosX, 0, menuPosY)
menuFrame.BackgroundColor3 = Color3.fromRGB(25, 28, 33)
menuFrame.BorderSizePixel = 0
menuFrame.ClipsDescendants = true
menuFrame.Visible = false
menuFrame.ZIndex = 95
menuFrame.Parent = screenGui

local menuCorner = Instance.new("UICorner")
menuCorner.CornerRadius = UDim.new(0, 8)
menuCorner.Parent = menuFrame

local menuShadow = Instance.new("Frame")
menuShadow.Size = UDim2.new(1, 4, 1, 4)
menuShadow.Position = UDim2.new(0, -2, 0, -2)
menuShadow.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
menuShadow.BackgroundTransparency = 0.7
menuShadow.BorderSizePixel = 0
menuShadow.ZIndex = 94
menuShadow.Parent = menuFrame

local menuShadowCorner = Instance.new("UICorner")
menuShadowCorner.CornerRadius = UDim.new(0, 8)
menuShadowCorner.Parent = menuShadow

-- Menu header
local menuHeader = Instance.new("Frame")
menuHeader.Name = "Header"
menuHeader.Size = UDim2.new(1, 0, 0, isMobile and 24 or 32)
menuHeader.BackgroundColor3 = Color3.fromRGB(88, 101, 242)
menuHeader.BorderSizePixel = 0
menuHeader.ZIndex = 96
menuHeader.Parent = menuFrame

local headerCorner = Instance.new("UICorner")
headerCorner.CornerRadius = UDim.new(0, isMobile and 5 or 8)
headerCorner.Parent = menuHeader

local headerFix = Instance.new("Frame")
headerFix.Size = UDim2.new(1, 0, 0, isMobile and 5 or 8)
headerFix.Position = UDim2.new(0, 0, 1, isMobile and -5 or -8)
headerFix.BackgroundColor3 = Color3.fromRGB(88, 101, 242)
headerFix.BorderSizePixel = 0
headerFix.ZIndex = 96
headerFix.Parent = menuHeader

local headerTitle = Instance.new("TextLabel")
headerTitle.Size = UDim2.new(1, -25, 1, 0)
headerTitle.Position = UDim2.new(0, isMobile and 4 or 8, 0, 0)
headerTitle.BackgroundTransparency = 1
headerTitle.Text = "🛠️ Tools"
headerTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
headerTitle.Font = Enum.Font.GothamBold
headerTitle.TextSize = isMobile and 9 or 13
headerTitle.TextXAlignment = Enum.TextXAlignment.Left
headerTitle.ZIndex = 97
headerTitle.Parent = menuHeader

local closeBtn = Instance.new("TextButton")
closeBtn.Size = isMobile and UDim2.new(0, 16, 0, 16) or UDim2.new(0, 22, 0, 22)
closeBtn.Position = isMobile and UDim2.new(1, -19, 0, 4) or UDim2.new(1, -27, 0, 5)
closeBtn.BackgroundColor3 = Color3.fromRGB(237, 66, 69)
closeBtn.BorderSizePixel = 0
closeBtn.Text = "×"
closeBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
closeBtn.Font = Enum.Font.GothamBold
closeBtn.TextSize = isMobile and 11 or 16
closeBtn.ZIndex = 98
closeBtn.Parent = menuHeader

local closeBtnCorner = Instance.new("UICorner")
closeBtnCorner.CornerRadius = UDim.new(0.3, 0)
closeBtnCorner.Parent = closeBtn

-- Scroll frame for scripts
local scrollFrame = Instance.new("ScrollingFrame")
scrollFrame.Size = isMobile and UDim2.new(1, -6, 1, -28) or UDim2.new(1, -12, 1, -38)
scrollFrame.Position = isMobile and UDim2.new(0, 3, 0, 27) or UDim2.new(0, 6, 0, 38)
scrollFrame.BackgroundTransparency = 1
scrollFrame.BorderSizePixel = 0
scrollFrame.ScrollBarThickness = isMobile and 2 or 3
scrollFrame.ScrollBarImageColor3 = Color3.fromRGB(88, 101, 242)
scrollFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
scrollFrame.ZIndex = 96
scrollFrame.Parent = menuFrame

local scrollLayout = Instance.new("UIListLayout")
scrollLayout.Padding = UDim.new(0, isMobile and 2 or 4)
scrollLayout.SortOrder = Enum.SortOrder.LayoutOrder
scrollLayout.Parent = scrollFrame

-- Auto-update canvas size
local contentSizeConnection = nil
pcall(function()
    contentSizeConnection = scrollLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        pcall(function()
            scrollFrame.CanvasSize = UDim2.new(0, 0, 0, scrollLayout.AbsoluteContentSize.Y + 6)
        end)
    end)
end)

-- ═══════════════════════════════════════════════════════════
--  🎯 SCRIPT MODULES
-- ═══════════════════════════════════════════════════════════

local hideScript = {
    name = "Hide Title",
    icon = "👁",
    enabled = false,
    hiddenObjects = {},
    connections = {},
    
    hidePlayerGui = function(self, character, hide)
        if not character then return end
        pcall(function()
            local head = character:FindFirstChild("Head")
            if not head then return end
            
            -- Hide BillboardGui elements
            for _, descendant in pairs(character:GetDescendants()) do
                if descendant:IsA("BillboardGui") then
                    if hide then
                        self.hiddenObjects[descendant] = descendant.Enabled
                        descendant.Enabled = false
                    else
                        if self.hiddenObjects[descendant] ~= nil then
                            descendant.Enabled = self.hiddenObjects[descendant]
                            self.hiddenObjects[descendant] = nil
                        end
                    end
                end
            end
            
            -- Set humanoid display distance
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid.DisplayDistanceType = hide and Enum.HumanoidDisplayDistanceType.None 
                    or Enum.HumanoidDisplayDistanceType.Viewer
            end
            
            -- Hide text elements in head
            for _, obj in pairs(head:GetDescendants()) do
                if obj:IsA("TextLabel") or obj:IsA("TextButton") or obj:IsA("TextBox") or obj:IsA("SurfaceGui") then
                    if hide then
                        self.hiddenObjects[obj] = obj:IsA("SurfaceGui") and obj.Enabled or obj.Visible
                        if obj:IsA("SurfaceGui") then 
                            obj.Enabled = false 
                        else 
                            obj.Visible = false 
                        end
                    else
                        if self.hiddenObjects[obj] ~= nil then
                            if obj:IsA("SurfaceGui") then 
                                obj.Enabled = self.hiddenObjects[obj] 
                            else 
                                obj.Visible = self.hiddenObjects[obj] 
                            end
                            self.hiddenObjects[obj] = nil
                        end
                    end
                end
            end
        end)
    end,
    
    toggle = function(self)
        self.enabled = not self.enabled
        for _, player in pairs(Players:GetPlayers()) do
            if player.Character then
                self:hidePlayerGui(player.Character, self.enabled)
            end
        end
        return self.enabled
    end,
    
    setup = function(self)
        local function onCharacterAdded(character)
            task.wait(0.5)
            if self.enabled then 
                self:hidePlayerGui(character, true) 
            end
            
            pcall(function()
                local conn = character.DescendantAdded:Connect(function(descendant)
                    if self.enabled then
                        task.wait(0.1)
                        pcall(function()
                            if descendant:IsA("BillboardGui") or descendant:IsA("SurfaceGui") then
                                descendant.Enabled = false
                            elseif descendant:IsA("TextLabel") or descendant:IsA("TextButton") 
                                or descendant:IsA("TextBox") then
                                local head = character:FindFirstChild("Head")
                                if head and descendant:IsDescendantOf(head) then 
                                    descendant.Visible = false 
                                end
                            end
                        end)
                    end
                end)
                if conn then
                    table.insert(self.connections, conn)
                end
            end)
        end
        
        for _, player in pairs(Players:GetPlayers()) do
            if player.Character then 
                pcall(function() onCharacterAdded(player.Character) end)
            end
            pcall(function()
                local conn = player.CharacterAdded:Connect(function(char)
                    pcall(function() onCharacterAdded(char) end)
                end)
                if conn then
                    table.insert(self.connections, conn)
                end
            end)
        end
        
        pcall(function()
            local conn = Players.PlayerAdded:Connect(function(player)
                pcall(function()
                    local charConn = player.CharacterAdded:Connect(function(char)
                        pcall(function() onCharacterAdded(char) end)
                    end)
                    if charConn then
                        table.insert(self.connections, charConn)
                    end
                end)
            end)
            if conn then
                table.insert(self.connections, conn)
            end
        end)
    end,
    
    cleanup = function(self)
        if self.connections and type(self.connections) == "table" then
            for _, conn in ipairs(self.connections) do
                pcall(function()
                    if conn and typeof(conn) == "RBXScriptConnection" then
                        conn:Disconnect()
                    end
                end)
            end
        end
        self.connections = {}
    end
}

local hidePlayersScript = {
    name = "Hide Players",
    icon = "👤",
    enabled = false,
    hiddenPlayers = {},
    hiddenGuis = {},
    hiddenTextElements = {},
    originalTransparencies = {},
    connections = {},
    
    hideCharacterGuis = function(self, character)
        if not character then return end
        
        pcall(function()
            for _, gui in pairs(character:GetDescendants()) do
                if gui:IsA("BillboardGui") or gui:IsA("SurfaceGui") then
                    self.hiddenGuis[gui] = gui.Enabled
                    gui.Enabled = false
                end
            end
            
            local head = character:FindFirstChild("Head")
            if head then
                for _, obj in pairs(head:GetDescendants()) do
                    if obj:IsA("TextLabel") or obj:IsA("TextButton") or obj:IsA("TextBox") then
                        self.hiddenTextElements[obj] = obj.Visible
                        obj.Visible = false
                    end
                end
            end
            
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid.DisplayDistanceType = Enum.HumanoidDisplayDistanceType.None
                humanoid.HealthDisplayDistance = 0
                humanoid.NameDisplayDistance = 0
            end
        end)
    end,
    
    showCharacterGuis = function(self, character)
        if not character then return end
        
        pcall(function()
            for _, gui in pairs(character:GetDescendants()) do
                if (gui:IsA("BillboardGui") or gui:IsA("SurfaceGui")) and self.hiddenGuis[gui] ~= nil then
                    gui.Enabled = self.hiddenGuis[gui]
                    self.hiddenGuis[gui] = nil
                end
            end
            
            local head = character:FindFirstChild("Head")
            if head then
                for _, obj in pairs(head:GetDescendants()) do
                    if (obj:IsA("TextLabel") or obj:IsA("TextButton") or obj:IsA("TextBox")) 
                        and self.hiddenTextElements[obj] ~= nil then
                        obj.Visible = self.hiddenTextElements[obj]
                        self.hiddenTextElements[obj] = nil
                    end
                end
            end
            
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid.DisplayDistanceType = Enum.HumanoidDisplayDistanceType.Viewer
                humanoid.HealthDisplayDistance = 100
                humanoid.NameDisplayDistance = 100
            end
        end)
    end,
    
    hideCharacter = function(self, character)
        if not character or self.hiddenPlayers[character] then return end
        
        self.hiddenPlayers[character] = true
        
        for _, obj in pairs(character:GetDescendants()) do
            pcall(function()
                if obj:IsA("BasePart") then
                    if not self.originalTransparencies[obj] then
                        self.originalTransparencies[obj] = obj.Transparency
                    end
                    obj.Transparency = 1
                    obj.CanCollide = false
                    
                elseif obj:IsA("Decal") or obj:IsA("Texture") then
                    if not self.originalTransparencies[obj] then
                        self.originalTransparencies[obj] = obj.Transparency
                    end
                    obj.Transparency = 1
                    
                elseif obj:IsA("ParticleEmitter") or obj:IsA("Beam") or obj:IsA("Trail") then
                    obj.Enabled = false
                end
            end)
        end
        
        self:hideCharacterGuis(character)
    end,
    
    showCharacter = function(self, character)
        if not character or not self.hiddenPlayers[character] then return end
        
        self.hiddenPlayers[character] = nil
        
        for _, obj in pairs(character:GetDescendants()) do
            pcall(function()
                if obj:IsA("BasePart") then
                    obj.Transparency = self.originalTransparencies[obj] or 0
                    if obj.Name ~= "HumanoidRootPart" then
                        obj.CanCollide = true
                    end
                    
                elseif obj:IsA("Decal") or obj:IsA("Texture") then
                    obj.Transparency = self.originalTransparencies[obj] or 0
                    
                elseif obj:IsA("ParticleEmitter") or obj:IsA("Beam") or obj:IsA("Trail") then
                    obj.Enabled = true
                end
            end)
        end
        
        self:showCharacterGuis(character)
    end,
    
    toggle = function(self)
        self.enabled = not self.enabled
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and player.Character then
                if self.enabled then
                    self:hideCharacter(player.Character)
                else
                    self:showCharacter(player.Character)
                end
            end
        end
        return self.enabled
    end,
    
    setup = function(self)
        local function setupCharacterMonitoring(character)
            if not character then return end
            
            pcall(function()
                local conn = character.DescendantAdded:Connect(function(descendant)
                    if self.enabled and self.hiddenPlayers[character] then
                        task.wait(0.1)
                        pcall(function()
                            if descendant:IsA("BillboardGui") or descendant:IsA("SurfaceGui") then
                                self.hiddenGuis[descendant] = descendant.Enabled
                                descendant.Enabled = false
                            elseif descendant:IsA("TextLabel") or descendant:IsA("TextButton") 
                                or descendant:IsA("TextBox") then
                                local head = character:FindFirstChild("Head")
                                if head and descendant:IsDescendantOf(head) then
                                    self.hiddenTextElements[descendant] = descendant.Visible
                                    descendant.Visible = false
                                end
                            end
                        end)
                    end
                end)
                if conn then
                    table.insert(self.connections, conn)
                end
            end)
        end
        
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer then
                if player.Character then
                    pcall(function() setupCharacterMonitoring(player.Character) end)
                end
                
                pcall(function()
                    local conn = player.CharacterAdded:Connect(function(character)
                        task.wait(0.5)
                        pcall(function() 
                            setupCharacterMonitoring(character)
                            if self.enabled and character.Parent then
                                self:hideCharacter(character)
                            end
                        end)
                    end)
                    if conn then
                        table.insert(self.connections, conn)
                    end
                end)
            end
        end
        
        pcall(function()
            local conn = Players.PlayerAdded:Connect(function(player)
                pcall(function()
                    local charConn = player.CharacterAdded:Connect(function(character)
                        task.wait(0.5)
                        pcall(function() 
                            setupCharacterMonitoring(character)
                            if self.enabled and character.Parent then
                                self:hideCharacter(character)
                            end
                        end)
                    end)
                    if charConn then
                        table.insert(self.connections, charConn)
                    end
                end)
            end)
            if conn then
                table.insert(self.connections, conn)
            end
        end)
        
        pcall(function()
            local conn = Players.PlayerRemoving:Connect(function(player)
                if player.Character then
                    self.hiddenPlayers[player.Character] = nil
                    for _, obj in pairs(player.Character:GetDescendants()) do
                        self.originalTransparencies[obj] = nil
                        self.hiddenGuis[obj] = nil
                        self.hiddenTextElements[obj] = nil
                    end
                end
            end)
            if conn then
                table.insert(self.connections, conn)
            end
        end)
    end,
    
    cleanup = function(self)
        if self.connections and type(self.connections) == "table" then
            for _, conn in ipairs(self.connections) do
                pcall(function()
                    if conn and typeof(conn) == "RBXScriptConnection" then
                        conn:Disconnect()
                    end
                end)
            end
        end
        self.connections = {}
        
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and player.Character then
                self:showCharacter(player.Character)
            end
        end
    end
}

local hideUIScript = {
    name = "Hide All UI",
    icon = "📱",
    enabled = false,
    originalStates = {},
    connections = {},
    
    toggle = function(self)
        self.enabled = not self.enabled
        if self.enabled then
            self.originalStates = {}
            for _, gui in pairs(PlayerGui:GetChildren()) do
                if gui ~= screenGui and gui:IsA("ScreenGui") then
                    self.originalStates[gui] = gui.Enabled
                    gui.Enabled = false
                end
            end
        else
            for gui, state in pairs(self.originalStates) do
                pcall(function() 
                    if gui and gui.Parent then 
                        gui.Enabled = state 
                    end 
                end)
            end
        end
        return self.enabled
    end,
    
    setup = function(self) end,
    cleanup = function(self) end
}

-- ═══════════════════════════════════════════════════════════
--  🎨 CREATE SCRIPT ITEMS
-- ═══════════════════════════════════════════════════════════

local function createScriptItem(scriptData, index)
    local itemHeight = isMobile and 30 or 42
    local iconSize = isMobile and 16 or 26
    local switchWidth = isMobile and 28 or 38
    local switchHeight = isMobile and 14 or 18
    local knobSize = isMobile and 9 or 13
    
    local itemFrame = Instance.new("Frame")
    itemFrame.Size = UDim2.new(1, 0, 0, itemHeight)
    itemFrame.BackgroundColor3 = Color3.fromRGB(35, 38, 43)
    itemFrame.BorderSizePixel = 0
    itemFrame.ZIndex = 96
    itemFrame.Parent = scrollFrame
    
    local itemCorner = Instance.new("UICorner")
    itemCorner.CornerRadius = UDim.new(0, isMobile and 4 or 5)
    itemCorner.Parent = itemFrame
    
    local iconLabel = Instance.new("TextLabel")
    iconLabel.Size = UDim2.new(0, iconSize, 0, iconSize)
    iconLabel.Position = isMobile and UDim2.new(0, 3, 0, 7) or UDim2.new(0, 6, 0, 8)
    iconLabel.BackgroundColor3 = Color3.fromRGB(88, 101, 242)
    iconLabel.BorderSizePixel = 0
    iconLabel.Text = scriptData.icon
    iconLabel.TextScaled = true
    iconLabel.Font = Enum.Font.GothamBold
    iconLabel.ZIndex = 97
    iconLabel.Parent = itemFrame
    
    local iconCorner = Instance.new("UICorner")
    iconCorner.CornerRadius = UDim.new(0.25, 0)
    iconCorner.Parent = iconLabel
    
    local nameLabel = Instance.new("TextLabel")
    nameLabel.Size = isMobile and UDim2.new(1, -62, 0, 10) or UDim2.new(1, -90, 0, 16)
    nameLabel.Position = isMobile and UDim2.new(0, 23, 0, 4) or UDim2.new(0, 37, 0, 6)
    nameLabel.BackgroundTransparency = 1
    nameLabel.Text = scriptData.name
    nameLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    nameLabel.Font = Enum.Font.GothamBold
    nameLabel.TextSize = isMobile and 8 or 11
    nameLabel.TextXAlignment = Enum.TextXAlignment.Left
    nameLabel.ZIndex = 97
    nameLabel.Parent = itemFrame
    
    local statusLabel = Instance.new("TextLabel")
    statusLabel.Size = isMobile and UDim2.new(1, -62, 0, 8) or UDim2.new(1, -90, 0, 12)
    statusLabel.Position = isMobile and UDim2.new(0, 23, 0, 16) or UDim2.new(0, 37, 0, 23)
    statusLabel.BackgroundTransparency = 1
    statusLabel.Text = "● Disabled"
    statusLabel.TextColor3 = Color3.fromRGB(130, 130, 130)
    statusLabel.Font = Enum.Font.Gotham
    statusLabel.TextSize = isMobile and 6 or 9
    statusLabel.TextXAlignment = Enum.TextXAlignment.Left
    statusLabel.ZIndex = 97
    statusLabel.Parent = itemFrame
    
    local toggleSwitch = Instance.new("TextButton")
    toggleSwitch.Size = UDim2.new(0, switchWidth, 0, switchHeight)
    toggleSwitch.Position = isMobile and UDim2.new(1, -31, 0.5, -7) or UDim2.new(1, -43, 0.5, -9)
    toggleSwitch.BackgroundColor3 = Color3.fromRGB(55, 58, 63)
    toggleSwitch.BorderSizePixel = 0
    toggleSwitch.Text = ""
    toggleSwitch.ZIndex = 97
    toggleSwitch.Parent = itemFrame
    
    local switchCorner = Instance.new("UICorner")
    switchCorner.CornerRadius = UDim.new(1, 0)
    switchCorner.Parent = toggleSwitch
    
    local switchKnob = Instance.new("Frame")
    switchKnob.Size = UDim2.new(0, knobSize, 0, knobSize)
    switchKnob.Position = UDim2.new(0, 2.5, 0, 2.5)
    switchKnob.BackgroundColor3 = Color3.fromRGB(200, 200, 200)
    switchKnob.BorderSizePixel = 0
    switchKnob.ZIndex = 98
    switchKnob.Parent = toggleSwitch
    
    local knobCorner = Instance.new("UICorner")
    knobCorner.CornerRadius = UDim.new(1, 0)
    knobCorner.Parent = switchKnob
    
    local function updateToggle(enabled)
        local tweenInfo = TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
        local knobPosEnabled = switchWidth - knobSize - 2.5
        
        if enabled then
            toggleSwitch.BackgroundColor3 = Color3.fromRGB(88, 201, 242)
            TweenService:Create(switchKnob, tweenInfo, {Position = UDim2.new(0, knobPosEnabled, 0, 2.5)}):Play()
            switchKnob.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            statusLabel.Text = "● Enabled"
            statusLabel.TextColor3 = Color3.fromRGB(88, 201, 242)
        else
            toggleSwitch.BackgroundColor3 = Color3.fromRGB(55, 58, 63)
            TweenService:Create(switchKnob, tweenInfo, {Position = UDim2.new(0, 2.5, 0, 2.5)}):Play()
            switchKnob.BackgroundColor3 = Color3.fromRGB(200, 200, 200)
            statusLabel.Text = "● Disabled"
            statusLabel.TextColor3 = Color3.fromRGB(130, 130, 130)
        end
    end
    
    pcall(function()
        toggleSwitch.MouseButton1Click:Connect(function()
            local success, result = pcall(function()
                return scriptData:toggle()
            end)
            
            if success then
                updateToggle(result)
                if isMobile then
                    pcall(function()
                        local HapticService = game:GetService("HapticService")
                        if HapticService and HapticService.SetMotor then
                            HapticService:SetMotor(Enum.UserInputType.Gamepad1, Enum.VibrationMotor.Small, 0.3)
                            task.wait(0.1)
                            HapticService:SetMotor(Enum.UserInputType.Gamepad1, Enum.VibrationMotor.Small, 0)
                        end
                    end)
                end
            else
                warn("❌ Error toggling script:", result)
            end
        end)
    end)
    
    if not isMobile then
        pcall(function()
            itemFrame.MouseEnter:Connect(function()
                TweenService:Create(itemFrame, TweenInfo.new(0.15), {BackgroundColor3 = Color3.fromRGB(42, 45, 50)}):Play()
            end)
        end)
        pcall(function()
            itemFrame.MouseLeave:Connect(function()
                TweenService:Create(itemFrame, TweenInfo.new(0.15), {BackgroundColor3 = Color3.fromRGB(35, 38, 43)}):Play()
            end)
        end)
    end
end

local scripts = {hideScript, hidePlayersScript, hideUIScript}

for i, script in ipairs(scripts) do
    pcall(function()
        if script and type(script.setup) == "function" then
            script:setup()
        end
    end)
    pcall(function()
        createScriptItem(script, i)
    end)
end

-- ═══════════════════════════════════════════════════════════
--  ⚡ ANIMATIONS & MENU CONTROL
-- ═══════════════════════════════════════════════════════════

local menuOpen = false

local function animateHamburger(open)
    pcall(function()
        local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Back, Enum.EasingDirection.Out)
        if open then
            TweenService:Create(topLine, tweenInfo, {
                Rotation = 45, 
                Position = UDim2.new(0, 0, 0.5, isMobile and -0.75 or -1)
            }):Play()
            TweenService:Create(middleLine, tweenInfo, {
                Size = UDim2.new(0, 0, 0, isMobile and 1.5 or 2), 
                BackgroundTransparency = 1
            }):Play()
            TweenService:Create(bottomLine, tweenInfo, {
                Rotation = -45, 
                Position = UDim2.new(0, 0, 0.5, isMobile and -0.75 or -1)
            }):Play()
        else
            TweenService:Create(topLine, tweenInfo, {
                Rotation = 0, 
                Position = UDim2.new(0, 0, 0, 0)
            }):Play()
            TweenService:Create(middleLine, tweenInfo, {
                Size = UDim2.new(1, 0, 0, isMobile and 1.5 or 2), 
                BackgroundTransparency = 0
            }):Play()
            TweenService:Create(bottomLine, tweenInfo, {
                Rotation = 0, 
                Position = UDim2.new(0, 0, 1, isMobile and -1.5 or -2)
            }):Play()
        end
    end)
end

local function toggleMenu()
    menuOpen = not menuOpen
    animateHamburger(menuOpen)
    
    pcall(function()
        if menuOpen then
            menuFrame.Visible = true
            local targetHeight = menuHeight
            TweenService:Create(menuFrame, TweenInfo.new(0.3, Enum.EasingStyle.Back), {
                Size = UDim2.new(0, menuWidth, 0, targetHeight)
            }):Play()
            toggleButton:TweenSize(
                isMobile and UDim2.new(0, 28, 0, 28) or UDim2.new(0, 33, 0, 33), 
                Enum.EasingDirection.Out, 
                Enum.EasingStyle.Elastic, 
                0.3, 
                true
            )
        else
            TweenService:Create(menuFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quad), {
                Size = UDim2.new(0, menuWidth, 0, 0)
            }):Play()
            task.wait(0.25)
            menuFrame.Visible = false
            toggleButton:TweenSize(
                isMobile and UDim2.new(0, 25, 0, 25) or UDim2.new(0, 30, 0, 30), 
                Enum.EasingDirection.Out, 
                Enum.EasingStyle.Quad, 
                0.2, 
                true
            )
        end
    end)
end

pcall(function()
    toggleButton.MouseButton1Click:Connect(toggleMenu)
end)

pcall(function()
    closeBtn.MouseButton1Click:Connect(toggleMenu)
end)

if not isMobile then
    pcall(function()
        toggleButton.MouseEnter:Connect(function()
            if not menuOpen then 
                toggleButton:TweenSize(UDim2.new(0, 33, 0, 33), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.15, true)
            end
        end)
    end)
    
    pcall(function()
        toggleButton.MouseLeave:Connect(function()
            if not menuOpen then 
                toggleButton:TweenSize(UDim2.new(0, 30, 0, 30), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.15, true)
            end
        end)
    end)
end

pcall(function()
    toggleButton.MouseButton1Down:Connect(function()
        toggleButton:TweenSize(
            isMobile and UDim2.new(0, 22, 0, 22) or UDim2.new(0, 27, 0, 27), 
            Enum.EasingDirection.Out, 
            Enum.EasingStyle.Quad, 
            0.1, 
            true
        )
    end)
end)

pcall(function()
    toggleButton.MouseButton1Up:Connect(function()
        if menuOpen then
            toggleButton:TweenSize(
                isMobile and UDim2.new(0, 28, 0, 28) or UDim2.new(0, 33, 0, 33), 
                Enum.EasingDirection.Out, 
                Enum.EasingStyle.Quad, 
                0.1, 
                true
            )
        end
    end)
end)

-- Breathing stroke effect
local breatheStroke = Instance.new("UIStroke")
breatheStroke.Color = Color3.fromRGB(114, 137, 218)
breatheStroke.Thickness = 1.5
breatheStroke.Transparency = 0.5
breatheStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
breatheStroke.Parent = toggleButton

local breatheTween = nil
pcall(function()
    breatheTween = TweenService:Create(
        breatheStroke, 
        TweenInfo.new(2, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true), 
        {Transparency = 0.2}
    )
    breatheTween:Play()
end)

-- ═══════════════════════════════════════════════════════════
--  🧹 CLEANUP SYSTEM
-- ═══════════════════════════════════════════════════════════

local cleanupConnections = {}

if contentSizeConnection then
    table.insert(cleanupConnections, contentSizeConnection)
end

local function cleanup()
    print("🧹 Cleaning up Script Hub...")
    
    pcall(function()
        if breatheTween then
            breatheTween:Cancel()
        end
    end)
    
    if scripts and type(scripts) == "table" then
        for _, script in ipairs(scripts) do
            pcall(function()
                if script and type(script) == "table" and type(script.cleanup) == "function" then
                    script:cleanup()
                end
            end)
        end
    end
    
    if cleanupConnections and type(cleanupConnections) == "table" then
        for i = #cleanupConnections, 1, -1 do
            pcall(function()
                local conn = cleanupConnections[i]
                if conn and typeof(conn) == "RBXScriptConnection" then
                    conn:Disconnect()
                end
            end)
        end
        cleanupConnections = {}
    end
    
    pcall(function()
        if screenGui and screenGui.Parent then
            screenGui:Destroy()
        end
    end)
    
    print("✅ Script Hub cleaned up successfully!")
end

pcall(function()
    if screenGui then
        local guiDestroyedConnection = screenGui.AncestryChanged:Connect(function(_, parent)
            if not parent then
                pcall(cleanup)
            end
        end)
        if guiDestroyedConnection then
            table.insert(cleanupConnections, guiDestroyedConnection)
        end
    end
end)

pcall(function()
    if Players and LocalPlayer then
        local playerLeavingConnection = Players.PlayerRemoving:Connect(function(removingPlayer)
            if removingPlayer == LocalPlayer then
                pcall(cleanup)
            end
        end)
        if playerLeavingConnection then
            table.insert(cleanupConnections, playerLeavingConnection)
        end
    end
end)

-- ═══════════════════════════════════════════════════════════
--  🎉 INITIALIZATION COMPLETE
-- ═══════════════════════════════════════════════════════════

print("═══════════════════════════════════════════════")
print("✅ Script Hub Loaded Successfully!")
print("📱 Author: ItoRenz00")
print("🎮 Version: 1.0.0")
print("═══════════════════════════════════════════════")
print("📱 Platform: " .. (isMobile and "Mobile 📱" or "PC 💻"))
print("🎮 Scripts Loaded: " .. tostring(#scripts))
print("═══════════════════════════════════════════════")
print("🔧 Features:")
print("   👁 Hide Title")
print("   👤 Hide Players")
print("   📱 Hide All UI (ScreenGui)")
print("   📱💻 Mobile & PC Responsive")
print("   🍔 Hamburger Menu Animation")
print("   ✨ Smooth Animations")
print("   🧹 Auto Cleanup System")
print("   🛡️ Full Error Protection")
print("═══════════════════════════════════════════════")
print("💡 TIP: Click the hamburger button (☰) to open menu!")
print("═══════════════════════════════════════════════")
