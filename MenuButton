--[[
    ROBLOX SCRIPT HUB v2.2.0
    Author: ItoRenz00
    Features: Hide Title, Hide Players, Hide UI, Spectator Mode, Reset to Base
    Place: StarterPlayer > StarterPlayerScripts > LocalScript
]]

-- Services
local Players = game:GetService("Players")
local UIS = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local StarterGui = game:GetService("StarterGui")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")
local isMobile = UIS.TouchEnabled and not UIS.KeyboardEnabled

-- Main GUI Setup
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "ScriptHubGui"
screenGui.ResetOnSpawn = false
screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
screenGui.DisplayOrder = 999999
screenGui.Parent = PlayerGui

-- Setup Remote Event for Basecamp Reset
local resetEvent = ReplicatedStorage:FindFirstChild("ResetCheckpointEvent")
if not resetEvent then
    resetEvent = Instance.new("RemoteEvent")
    resetEvent.Name = "ResetCheckpointEvent"
    resetEvent.Parent = ReplicatedStorage
end

-- Constants
local COLORS = {
    primary = Color3.fromRGB(88, 101, 242),
    secondary = Color3.fromRGB(114, 137, 218),
    background = Color3.fromRGB(25, 28, 33),
    itemBg = Color3.fromRGB(42, 45, 50),
    categoryBg = Color3.fromRGB(35, 38, 43),
    red = Color3.fromRGB(237, 66, 69),
    white = Color3.fromRGB(255, 255, 255),
    gray = Color3.fromRGB(130, 130, 130),
    cyan = Color3.fromRGB(88, 201, 242)
}

local SIZES = {
    toggleBtn = isMobile and 25 or 30,
    menuWidth = isMobile and 135 or 200,
    menuHeight = isMobile and 180 or 250,
    itemHeight = isMobile and 30 or 42,
    categoryHeight = isMobile and 32 or 44,
    textMain = isMobile and 9 or 13,
    textSmall = isMobile and 6 or 9
}

-- Utility Functions
local function safeConnect(signal, callback)
    local success, conn = pcall(function()
        return signal:Connect(callback)
    end)
    return success and conn or nil
end

local function createCorner(parent, radius)
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, radius)
    corner.Parent = parent
    return corner
end

local function createButton(props)
    local btn = Instance.new("TextButton")
    for k, v in pairs(props) do btn[k] = v end
    return btn
end

-- Toggle Button (UPDATED POSITION)
local toggleButton = createButton({
    Name = "HubToggle",
    Size = UDim2.new(0, SIZES.toggleBtn, 0, SIZES.toggleBtn),
    Position = isMobile and UDim2.new(1, -37, 0, -45) or UDim2.new(1, -35, 0, -45),
    BackgroundColor3 = COLORS.primary,
    BorderSizePixel = 0,
    Text = "",
    ZIndex = 100,
    Parent = screenGui
})
createCorner(toggleButton, 6)

-- Hamburger Icon
local hamburgerContainer = Instance.new("Frame")
hamburgerContainer.Size = UDim2.new(0, isMobile and 13 or 18, 0, isMobile and 9 or 13)
hamburgerContainer.Position = UDim2.new(0.5, -(isMobile and 6.5 or 9), 0.5, -(isMobile and 4.5 or 6.5))
hamburgerContainer.BackgroundTransparency = 1
hamburgerContainer.ZIndex = 101
hamburgerContainer.Parent = toggleButton

local function createLine(name, pos)
    local line = Instance.new("Frame")
    line.Name = name
    line.Size = UDim2.new(1, 0, 0, isMobile and 1.5 or 2)
    line.Position = pos
    line.BackgroundColor3 = COLORS.white
    line.BorderSizePixel = 0
    line.ZIndex = 102
    line.Parent = hamburgerContainer
    createCorner(line, 1)
    return line
end

local topLine = createLine("TopLine", UDim2.new(0, 0, 0, 0))
local middleLine = createLine("MiddleLine", UDim2.new(0, 0, 0.5, -(isMobile and 0.75 or 1)))
local bottomLine = createLine("BottomLine", UDim2.new(0, 0, 1, -(isMobile and 1.5 or 2)))

-- Menu Panel (UPDATED POSITION)
local menuFrame = Instance.new("Frame")
menuFrame.Name = "MenuPanel"
menuFrame.Size = UDim2.new(0, SIZES.menuWidth, 0, 0)
menuFrame.Position = UDim2.new(1, -(isMobile and 143 or 205), 0, isMobile and -15 or -10)
menuFrame.BackgroundColor3 = COLORS.background
menuFrame.BorderSizePixel = 0
menuFrame.ClipsDescendants = true
menuFrame.Visible = false
menuFrame.ZIndex = 95
menuFrame.Parent = screenGui
createCorner(menuFrame, 8)

-- Menu Header
local menuHeader = Instance.new("Frame")
menuHeader.Size = UDim2.new(1, 0, 0, isMobile and 24 or 32)
menuHeader.BackgroundColor3 = COLORS.primary
menuHeader.BorderSizePixel = 0
menuHeader.ZIndex = 96
menuHeader.Parent = menuFrame
createCorner(menuHeader, isMobile and 5 or 8)

local headerTitle = Instance.new("TextLabel")
headerTitle.Size = UDim2.new(1, -25, 1, 0)
headerTitle.Position = UDim2.new(0, isMobile and 4 or 8, 0, 0)
headerTitle.BackgroundTransparency = 1
headerTitle.Text = "üõ†Ô∏è Script Hub"
headerTitle.TextColor3 = COLORS.white
headerTitle.Font = Enum.Font.GothamBold
headerTitle.TextSize = SIZES.textMain
headerTitle.TextXAlignment = Enum.TextXAlignment.Left
headerTitle.ZIndex = 97
headerTitle.Parent = menuHeader

local closeBtn = createButton({
    Size = isMobile and UDim2.new(0, 16, 0, 16) or UDim2.new(0, 22, 0, 22),
    Position = isMobile and UDim2.new(1, -19, 0, 4) or UDim2.new(1, -27, 0, 5),
    BackgroundColor3 = COLORS.red,
    BorderSizePixel = 0,
    Text = "√ó",
    TextColor3 = COLORS.white,
    Font = Enum.Font.GothamBold,
    TextSize = isMobile and 11 or 16,
    ZIndex = 98,
    Parent = menuHeader
})
createCorner(closeBtn, 3)

-- Scroll Frame
local scrollFrame = Instance.new("ScrollingFrame")
scrollFrame.Size = isMobile and UDim2.new(1, -6, 1, -28) or UDim2.new(1, -12, 1, -38)
scrollFrame.Position = isMobile and UDim2.new(0, 3, 0, 27) or UDim2.new(0, 6, 0, 38)
scrollFrame.BackgroundTransparency = 1
scrollFrame.ScrollBarThickness = isMobile and 2 or 3
scrollFrame.ScrollBarImageColor3 = COLORS.primary
scrollFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
scrollFrame.ZIndex = 96
scrollFrame.Parent = menuFrame

local scrollLayout = Instance.new("UIListLayout")
scrollLayout.Padding = UDim.new(0, isMobile and 2 or 4)
scrollLayout.SortOrder = Enum.SortOrder.LayoutOrder
scrollLayout.Parent = scrollFrame

safeConnect(scrollLayout:GetPropertyChangedSignal("AbsoluteContentSize"), function()
    pcall(function()
        scrollFrame.CanvasSize = UDim2.new(0, 0, 0, scrollLayout.AbsoluteContentSize.Y + 6)
    end)
end)

-- Menu Animation Variables
local menuOpen = false

local function animateHamburger(open)
    local info = TweenInfo.new(0.4, Enum.EasingStyle.Quint, Enum.EasingDirection.Out)
    local mid = isMobile and 0.75 or 1
    
    if open then
        TweenService:Create(topLine, info, {Rotation = 45, Position = UDim2.new(0, 0, 0.5, -mid)}):Play()
        TweenService:Create(middleLine, info, {Size = UDim2.new(0, 0, 0, isMobile and 1.5 or 2), BackgroundTransparency = 1}):Play()
        TweenService:Create(bottomLine, info, {Rotation = -45, Position = UDim2.new(0, 0, 0.5, -mid)}):Play()
    else
        TweenService:Create(topLine, info, {Rotation = 0, Position = UDim2.new(0, 0, 0, 0)}):Play()
        TweenService:Create(middleLine, info, {Size = UDim2.new(1, 0, 0, isMobile and 1.5 or 2), BackgroundTransparency = 0}):Play()
        TweenService:Create(bottomLine, info, {Rotation = 0, Position = UDim2.new(0, 0, 1, -(isMobile and 1.5 or 2))}):Play()
    end
end

local function toggleMenu()
    menuOpen = not menuOpen
    animateHamburger(menuOpen)
    
    if menuOpen then
        menuFrame.Visible = true
        TweenService:Create(menuFrame, TweenInfo.new(0.4, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
            Size = UDim2.new(0, SIZES.menuWidth, 0, SIZES.menuHeight)
        }):Play()
        TweenService:Create(toggleButton, TweenInfo.new(0.35, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {
            Size = UDim2.new(0, isMobile and 28 or 33, 0, isMobile and 28 or 33)
        }):Play()
    else
        -- Instant close without animation
        menuFrame.Visible = false
        menuFrame.Size = UDim2.new(0, SIZES.menuWidth, 0, 0)
        toggleButton.Size = UDim2.new(0, SIZES.toggleBtn, 0, SIZES.toggleBtn)
    end
end

-- Script Modules
local hideScript = {
    name = "Hide Title",
    icon = "üëÅ",
    enabled = false,
    hiddenObjects = {},
    connections = {},
    
    hidePlayerGui = function(self, char, hide)
        if not char then return end
        pcall(function()
            for _, obj in pairs(char:GetDescendants()) do
                if obj:IsA("BillboardGui") then
                    if hide then
                        self.hiddenObjects[obj] = obj.Enabled
                        obj.Enabled = false
                    elseif self.hiddenObjects[obj] ~= nil then
                        obj.Enabled = self.hiddenObjects[obj]
                        self.hiddenObjects[obj] = nil
                    end
                end
            end
            
            local hum = char:FindFirstChildOfClass("Humanoid")
            if hum then
                hum.DisplayDistanceType = hide and Enum.HumanoidDisplayDistanceType.None 
                    or Enum.HumanoidDisplayDistanceType.Viewer
            end
        end)
    end,
    
    toggle = function(self)
        self.enabled = not self.enabled
        for _, p in pairs(Players:GetPlayers()) do
            if p.Character then self:hidePlayerGui(p.Character, self.enabled) end
        end
        return self.enabled
    end,
    
    setup = function(self)
        local function onChar(char)
            task.wait(0.5)
            if self.enabled then self:hidePlayerGui(char, true) end
        end
        
        for _, p in pairs(Players:GetPlayers()) do
            if p.Character then onChar(p.Character) end
            table.insert(self.connections, safeConnect(p.CharacterAdded, onChar))
        end
        table.insert(self.connections, safeConnect(Players.PlayerAdded, function(p)
            table.insert(self.connections, safeConnect(p.CharacterAdded, onChar))
        end))
    end,
    
    cleanup = function(self)
        for _, c in ipairs(self.connections) do pcall(function() c:Disconnect() end) end
        self.connections = {}
    end
}

local hidePlayersScript = {
    name = "Hide Players",
    icon = "üë§",
    enabled = false,
    hiddenPlayers = {},
    originalTransparencies = {},
    connections = {},
    
    hideCharacter = function(self, char)
        if not char or self.hiddenPlayers[char] then return end
        self.hiddenPlayers[char] = true
        
        for _, obj in pairs(char:GetDescendants()) do
            pcall(function()
                if obj:IsA("BasePart") then
                    self.originalTransparencies[obj] = obj.Transparency
                    obj.Transparency = 1
                    obj.CanCollide = false
                elseif obj:IsA("Decal") or obj:IsA("Texture") then
                    self.originalTransparencies[obj] = obj.Transparency
                    obj.Transparency = 1
                elseif obj:IsA("ParticleEmitter") or obj:IsA("Beam") or obj:IsA("Trail") then
                    obj.Enabled = false
                elseif obj:IsA("BillboardGui") then
                    self.originalTransparencies[obj] = obj.Enabled
                    obj.Enabled = false
                end
            end)
        end
        
        local hum = char:FindFirstChildOfClass("Humanoid")
        if hum then
            if not self.originalTransparencies[hum] then
                self.originalTransparencies[hum] = {
                    displayType = hum.DisplayDistanceType,
                    healthDist = hum.HealthDisplayDistance,
                    nameDist = hum.NameDisplayDistance
                }
            end
            hum.DisplayDistanceType = Enum.HumanoidDisplayDistanceType.None
            hum.HealthDisplayDistance = 0
            hum.NameDisplayDistance = 0
        end
    end,
    
    showCharacter = function(self, char)
        if not char or not self.hiddenPlayers[char] then return end
        self.hiddenPlayers[char] = nil
        
        for _, obj in pairs(char:GetDescendants()) do
            pcall(function()
                if obj:IsA("BasePart") then
                    obj.Transparency = self.originalTransparencies[obj] or 0
                    if obj.Name ~= "HumanoidRootPart" then obj.CanCollide = true end
                elseif obj:IsA("Decal") or obj:IsA("Texture") then
                    obj.Transparency = self.originalTransparencies[obj] or 0
                elseif obj:IsA("ParticleEmitter") or obj:IsA("Beam") or obj:IsA("Trail") then
                    obj.Enabled = true
                elseif obj:IsA("BillboardGui") and self.originalTransparencies[obj] ~= nil then
                    obj.Enabled = self.originalTransparencies[obj]
                end
            end)
        end
        
        local hum = char:FindFirstChildOfClass("Humanoid")
        if hum and self.originalTransparencies[hum] then
            local saved = self.originalTransparencies[hum]
            hum.DisplayDistanceType = saved.displayType
            hum.HealthDisplayDistance = saved.healthDist
            hum.NameDisplayDistance = saved.nameDist
            self.originalTransparencies[hum] = nil
        end
    end,
    
    toggle = function(self)
        self.enabled = not self.enabled
        for _, p in pairs(Players:GetPlayers()) do
            if p ~= LocalPlayer and p.Character then
                if self.enabled then 
                    self:hideCharacter(p.Character)
                else 
                    self:showCharacter(p.Character) 
                end
            end
        end
        return self.enabled
    end,
    
    setup = function(self)
        for _, p in pairs(Players:GetPlayers()) do
            if p ~= LocalPlayer then
                table.insert(self.connections, safeConnect(p.CharacterAdded, function(char)
                    task.wait(0.5)
                    if self.enabled then self:hideCharacter(char) end
                end))
            end
        end
    end,
    
    cleanup = function(self)
        for _, c in ipairs(self.connections) do pcall(function() c:Disconnect() end) end
        for _, p in pairs(Players:GetPlayers()) do
            if p ~= LocalPlayer and p.Character then self:showCharacter(p.Character) end
        end
        self.connections = {}
    end
}

local hideUIScript = {
    name = "Hide All UI",
    icon = "üì±",
    enabled = false,
    originalStates = {},
    coreGuiStates = {},
    
    toggle = function(self)
        self.enabled = not self.enabled
        if self.enabled then
            self.originalStates = {}
            self.coreGuiStates = {}
            
            -- Hide ONLY Health and Backpack CoreGui (EXCLUDE PlayerList, Chat, EmotesMenu)
            local coreGuiTypesToHide = {
                Enum.CoreGuiType.Health,
                Enum.CoreGuiType.Backpack
            }
            
            for _, guiType in pairs(coreGuiTypesToHide) do
                pcall(function()
                    local isEnabled = StarterGui:GetCoreGuiEnabled(guiType)
                    self.coreGuiStates[guiType] = isEnabled
                    if isEnabled then
                        StarterGui:SetCoreGuiEnabled(guiType, false)
                    end
                end)
            end
            
            -- Hide all ScreenGuis in PlayerGui (except ScriptHubGui)
            for _, gui in pairs(PlayerGui:GetChildren()) do
                if gui ~= screenGui and gui:IsA("ScreenGui") then
                    self.originalStates[gui] = gui.Enabled
                    gui.Enabled = false
                end
            end
            
        else
            -- Restore CoreGui elements
            for guiType, wasEnabled in pairs(self.coreGuiStates) do
                pcall(function()
                    if wasEnabled then
                        StarterGui:SetCoreGuiEnabled(guiType, true)
                    end
                end)
            end
            self.coreGuiStates = {}
            
            -- Restore ScreenGuis
            for gui, state in pairs(self.originalStates) do
                pcall(function() 
                    if gui.Parent then 
                        gui.Enabled = state 
                    end 
                end)
            end
            self.originalStates = {}
        end
        return self.enabled
    end,
    
    setup = function(self) end,
    cleanup = function(self) 
        if self.enabled then
            self:toggle()
        end
    end
}

local spectatorScript = {
    name = "Spectator Mode",
    icon = "üëÅÔ∏è",
    enabled = false,
    isSpectating = false,
    currentIndex = 1,
    spectateList = {},
    camera = workspace.CurrentCamera,
    spectatorGui = nil,
    connections = {},
    originalCameraSubject = nil,
    coreGuisEnabled = {},
    hiddenCustomGuis = {},
    hiddenPlayerGuis = {},
    
    isLeaderboardGui = function(self, obj)
        if obj.Name == "PlayerList" then
            return true
        end
        
        local current = obj
        while current do
            if current.Name == "leaderstats" or 
               current.Name == "PlayerList" or
               current.Name == "Leaderboard" then
                return true
            end
            current = current.Parent
            if current == game or not current then break end
        end
        
        return false
    end,
    
    hidePlayerGui = function(self, char)
        if not char then return end
        local player = Players:GetPlayerFromCharacter(char)
        if not player then return end
        
        local userId = tostring(player.UserId)
        if not self.hiddenPlayerGuis[userId] then
            self.hiddenPlayerGuis[userId] = {}
        end
        
        pcall(function()
            for _, obj in pairs(char:GetDescendants()) do
                if not self:isLeaderboardGui(obj) then
                    if obj:IsA("BillboardGui") then
                        if self.hiddenPlayerGuis[userId][obj] == nil then
                            self.hiddenPlayerGuis[userId][obj] = {enabled = obj.Enabled}
                        end
                        obj.Enabled = false
                    elseif obj:IsA("SurfaceGui") then
                        if self.hiddenPlayerGuis[userId][obj] == nil then
                            self.hiddenPlayerGuis[userId][obj] = {enabled = obj.Enabled}
                        end
                        obj.Enabled = false
                    end
                end
            end
            
            local hum = char:FindFirstChildOfClass("Humanoid")
            if hum then
                if not self.hiddenPlayerGuis[userId].humanoidDisplay then
                    self.hiddenPlayerGuis[userId].humanoidDisplay = {
                        displayType = hum.DisplayDistanceType,
                        healthDist = hum.HealthDisplayDistance,
                        nameDist = hum.NameDisplayDistance
                    }
                end
                hum.DisplayDistanceType = Enum.HumanoidDisplayDistanceType.None
                hum.HealthDisplayDistance = 0
                hum.NameDisplayDistance = 0
            end
            
            local head = char:FindFirstChild("Head")
            if head then
                for _, obj in pairs(head:GetDescendants()) do
                    if not self:isLeaderboardGui(obj) then
                        if obj:IsA("TextLabel") or obj:IsA("TextButton") or obj:IsA("TextBox") then
                            if self.hiddenPlayerGuis[userId][obj] == nil then
                                self.hiddenPlayerGuis[userId][obj] = {visible = obj.Visible}
                            end
                            obj.Visible = false
                        end
                    end
                end
            end
        end)
    end,
    
    showPlayerGui = function(self, char)
        if not char then return end
        local player = Players:GetPlayerFromCharacter(char)
        if not player then return end
        
        local userId = tostring(player.UserId)
        if not self.hiddenPlayerGuis[userId] then return end
        
        pcall(function()
            for obj, state in pairs(self.hiddenPlayerGuis[userId]) do
                if typeof(obj) == "Instance" and obj.Parent then
                    if (obj:IsA("BillboardGui") or obj:IsA("SurfaceGui")) and state.enabled ~= nil then
                        obj.Enabled = state.enabled
                    elseif (obj:IsA("TextLabel") or obj:IsA("TextButton") or obj:IsA("TextBox")) and state.visible ~= nil then
                        obj.Visible = state.visible
                    end
                end
            end
            
            if self.hiddenPlayerGuis[userId].humanoidDisplay then
                local hum = char:FindFirstChildOfClass("Humanoid")
                if hum then
                    local saved = self.hiddenPlayerGuis[userId].humanoidDisplay
                    hum.DisplayDistanceType = saved.displayType
                    hum.HealthDisplayDistance = saved.healthDist
                    hum.NameDisplayDistance = saved.nameDist
                end
            end
        end)
        
        self.hiddenPlayerGuis[userId] = nil
    end,
    
    hideAllPlayerGuis = function(self)
        for _, player in pairs(Players:GetPlayers()) do
            if player.Character then
                self:hidePlayerGui(player.Character)
            end
        end
    end,
    
    showAllPlayerGuis = function(self)
        for userId, _ in pairs(self.hiddenPlayerGuis) do
            local player = Players:GetPlayerByUserId(tonumber(userId))
            if player and player.Character then
                self:showPlayerGui(player.Character)
            end
        end
        self.hiddenPlayerGuis = {}
    end,
    
    hideGameUI = function(self)
        local coreGuiTypes = {
            Enum.CoreGuiType.Health,
            Enum.CoreGuiType.Backpack
        }
        
        for _, guiType in pairs(coreGuiTypes) do
            pcall(function()
                local isEnabled = StarterGui:GetCoreGuiEnabled(guiType)
                self.coreGuisEnabled[guiType] = isEnabled
                if isEnabled then
                    StarterGui:SetCoreGuiEnabled(guiType, false)
                end
            end)
        end
        
        for _, gui in pairs(PlayerGui:GetChildren()) do
            if gui:IsA("ScreenGui") and gui.Name ~= "ScriptHubGui" and gui.Name ~= "SpectatorControlsGUI" then
                if not self:isLeaderboardGui(gui) then
                    self.hiddenCustomGuis[gui] = gui.Enabled
                    gui.Enabled = false
                end
            end
        end
    end,
    
    showGameUI = function(self)
        for guiType, wasEnabled in pairs(self.coreGuisEnabled) do
            pcall(function()
                if wasEnabled then
                    StarterGui:SetCoreGuiEnabled(guiType, true)
                end
            end)
        end
        self.coreGuisEnabled = {}
        
        for gui, wasEnabled in pairs(self.hiddenCustomGuis) do
            pcall(function()
                if gui and gui.Parent then
                    gui.Enabled = wasEnabled
                end
            end)
        end
        self.hiddenCustomGuis = {}
    end,
    
    updateList = function(self)
        self.spectateList = {}
        for _, p in pairs(Players:GetPlayers()) do
            if p.Character and p.Character:FindFirstChild("Humanoid") then
                table.insert(self.spectateList, p)
            end
        end
    end,
    
    spectatePlayer = function(self, player)
        if not (player and player.Character and player.Character:FindFirstChild("Humanoid")) then
            return false
        end
        
        self.camera.CameraSubject = player.Character.Humanoid
        return true
    end,
    
    stopSpectating = function(self)
        self.isSpectating = false
        
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
            self.camera.CameraSubject = LocalPlayer.Character.Humanoid
        elseif self.originalCameraSubject then
            self.camera.CameraSubject = self.originalCameraSubject
        end
        
        self:showGameUI()
        self:showAllPlayerGuis()
    end,
    
    createUI = function(self)
        if self.spectatorGui then return end
        
        local gui = Instance.new("ScreenGui")
        gui.Name = "SpectatorControlsGUI"
        gui.ResetOnSpawn = false
        gui.DisplayOrder = 999998
        gui.Parent = PlayerGui
        
        local function createNavBtn(text, pos)
            local btn = createButton({
                Text = text,
                Font = Enum.Font.GothamBold,
                TextColor3 = COLORS.white,
                BackgroundTransparency = 1,
                TextSize = isMobile and 32 or 40,
                Size = isMobile and UDim2.new(0, 50, 0, 60) or UDim2.new(0, 60, 0, 80),
                Position = pos,
                Visible = false,
                Parent = gui
            })
            return btn
        end
        
        self.prevBtn = createNavBtn("‚óÄ", isMobile and UDim2.new(0, 10, 0.5, -30) or UDim2.new(0, 15, 0.5, -40))
        self.nextBtn = createNavBtn("‚ñ∂", isMobile and UDim2.new(1, -60, 0.5, -30) or UDim2.new(1, -75, 0.5, -40))
        
        self.infoLabel = Instance.new("TextLabel")
        self.infoLabel.Text = ""
        self.infoLabel.Font = Enum.Font.GothamBold
        self.infoLabel.TextColor3 = COLORS.white
        self.infoLabel.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
        self.infoLabel.BackgroundTransparency = 0.5
        self.infoLabel.TextSize = isMobile and 14 or 16
        self.infoLabel.Size = isMobile and UDim2.new(0, 240, 0, 20) or UDim2.new(0, 280, 0, 30)
        self.infoLabel.Position = isMobile and UDim2.new(0.5, -120, 0.85, 20) or UDim2.new(0.5, -140, 0.85, 60)
        self.infoLabel.Visible = false
        self.infoLabel.Parent = gui
        createCorner(self.infoLabel, 10)
        
        self.spectatorGui = gui
        
        local function navigatePlayer(direction)
            if not (self.isSpectating and #self.spectateList > 0) then return end
            
            self:updateList()
            if #self.spectateList == 0 then
                self:stopSpectating()
                self.enabled = false
                self.prevBtn.Visible = false
                self.nextBtn.Visible = false
                self.infoLabel.Visible = false
                return
            end
            
            if direction == "prev" then
                self.currentIndex = self.currentIndex - 1
                if self.currentIndex < 1 then
                    self.currentIndex = #self.spectateList
                end
            else
                self.currentIndex = self.currentIndex + 1
                if self.currentIndex > #self.spectateList then
                    self.currentIndex = 1
                end
            end
            
            if self:spectatePlayer(self.spectateList[self.currentIndex]) then
                local p = self.spectateList[self.currentIndex]
                self.infoLabel.Text = p.DisplayName .. " (@" .. p.Name .. ")"
            end
        end
        
        table.insert(self.connections, safeConnect(self.prevBtn.MouseButton1Click, function()
            navigatePlayer("prev")
        end))
        
        table.insert(self.connections, safeConnect(self.nextBtn.MouseButton1Click, function()
            navigatePlayer("next")
        end))
    end,
    
    toggle = function(self)
        self.enabled = not self.enabled
        self.isSpectating = self.enabled
        
        if not self.spectatorGui then 
            self:createUI() 
        end
        
        if self.isSpectating then
            self.originalCameraSubject = self.camera.CameraSubject
            
            self:updateList()
            
            if #self.spectateList > 0 then
                self.currentIndex = 1
                
                if menuOpen then
                    toggleMenu()
                end
                
                self:hideGameUI()
                self:hideAllPlayerGuis()
                
                if self:spectatePlayer(self.spectateList[1]) then
                    self.prevBtn.Visible = true
                    self.nextBtn.Visible = true
                    self.infoLabel.Visible = true
                    
                    local p = self.spectateList[1]
                    self.infoLabel.Text = p.DisplayName .. " (@" .. p.Name .. ")"
                else
                    self:stopSpectating()
                    self.enabled = false
                end
            else
                self.infoLabel.Visible = true
                self.infoLabel.Text = "No players to spectate!"
                task.delay(2, function()
                    self.infoLabel.Visible = false
                end)
                self.isSpectating = false
                self.enabled = false
            end
        else
            self:stopSpectating()
            self.prevBtn.Visible = false
            self.nextBtn.Visible = false
            self.infoLabel.Visible = false
        end
        
        return self.enabled
    end,
    
    setup = function(self)
        table.insert(self.connections, safeConnect(Players.PlayerRemoving, function(removedPlayer)
            if not self.isSpectating then return end
            
            local userId = tostring(removedPlayer.UserId)
            self.hiddenPlayerGuis[userId] = nil
            
            self:updateList()
            
            if #self.spectateList == 0 then
                self:stopSpectating()
                self.enabled = false
                self.prevBtn.Visible = false
                self.nextBtn.Visible = false
                self.infoLabel.Visible = false
            elseif self.spectateList[self.currentIndex] == nil then
                self.currentIndex = 1
                if self:spectatePlayer(self.spectateList[1]) then
                    local p = self.spectateList[1]
                    self.infoLabel.Text = p.DisplayName .. " (@" .. p.Name .. ")"
                end
            end
        end))
        
        table.insert(self.connections, safeConnect(Players.PlayerAdded, function(newPlayer)
            table.insert(self.connections, safeConnect(newPlayer.CharacterAdded, function(char)
                task.wait(0.5)
                if self.isSpectating then
                    self:hidePlayerGui(char)
                end
            end))
        end))
        
        for _, player in pairs(Players:GetPlayers()) do
            table.insert(self.connections, safeConnect(player.CharacterAdded, function(char)
                task.wait(0.5)
                if self.isSpectating then
                    self:hidePlayerGui(char)
                end
            end))
        end
    end,
    
    cleanup = function(self)
        for _, c in ipairs(self.connections) do pcall(function() c:Disconnect() end) end
        self.connections = {}
        
        if self.isSpectating then
            self:stopSpectating()
        end
        
        if self.spectatorGui then 
            pcall(function() self.spectatorGui:Destroy() end)
            self.spectatorGui = nil
        end
    end
}

local basecampResetScript = {
    name = "Reset to Base",
    icon = "‚åÇ",
    enabled = false,
    basecampNames = {"Basecamp", "SpawnLocation", "Base", "Spawn"},
    defaultSpawn = Vector3.new(0, 50, 0),
    
    findBasecamp = function(self)
        for _, name in ipairs(self.basecampNames) do
            local found = workspace:FindFirstChild(name)
            if found then return found end
        end
        return nil
    end,
    
    resetToBasecamp = function(self)
        local character = LocalPlayer.Character
        if not character or not character:FindFirstChild("HumanoidRootPart") then
            warn("‚ö†Ô∏è Character not found or HumanoidRootPart missing")
            return false
        end
        
        -- Fire server event to reset checkpoint
        pcall(function()
            resetEvent:FireServer("ResetCheckpoint")
        end)
        
        -- Find and teleport to basecamp
        local basecamp = self:findBasecamp()
        local hrp = character.HumanoidRootPart
        
        if basecamp then
            local spawnPart = basecamp:IsA("BasePart") and basecamp or basecamp:FindFirstChildWhichIsA("BasePart", true)
            
            if spawnPart and spawnPart:IsA("BasePart") then
                character:MoveTo(spawnPart.Position + Vector3.new(0, 3, 0))
                print("‚úì Reset to basecamp successful!")
            else
                character:MoveTo(basecamp:GetPivot().Position + Vector3.new(0, 3, 0))
                print("‚úì Reset to basecamp successful (pivot)!")
            end
        else
            character:MoveTo(self.defaultSpawn)
            warn("‚ö†Ô∏è Basecamp not found, spawning at default location")
        end
        
        -- Reset physics
        if hrp then
            hrp.AssemblyLinearVelocity = Vector3.zero
            hrp.AssemblyAngularVelocity = Vector3.zero
            hrp.CFrame = CFrame.new(hrp.Position) * CFrame.Angles(0, hrp.CFrame:ToEulerAnglesYXZ(), 0)
        end
        
        -- Restore health
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.Health = humanoid.MaxHealth
            print("‚úì Health restored")
        end
        
        return true
    end,
    
    toggle = function(self)
        -- This is a one-time action script, not a toggle
        local success = self:resetToBasecamp()
        
        -- Close menu immediately after reset (no animation)
        if success and menuOpen then
            menuOpen = false
            animateHamburger(false)
            menuFrame.Visible = false
            menuFrame.Size = UDim2.new(0, SIZES.menuWidth, 0, 0)
            toggleButton.Size = UDim2.new(0, SIZES.toggleBtn, 0, SIZES.toggleBtn)
        end
        
        return false -- Always return to disabled state
    end,
    
    setup = function(self) end,
    cleanup = function(self) end
}

-- Categories
local categories = {
    {name = "üëÅÔ∏è Visibility", icon = "üëÅÔ∏è", expanded = false, scripts = {hideScript, hidePlayersScript}},
    {name = "üì± Interface", icon = "üì±", expanded = false, scripts = {hideUIScript}},
    {name = "üé• Camera", icon = "üé•", expanded = false, scripts = {spectatorScript}},
    {name = "üîÑ Reset", icon = "üîÑ", expanded = false, scripts = {basecampResetScript}}
}

-- Initialize Scripts
for _, cat in ipairs(categories) do
    for _, script in ipairs(cat.scripts) do
        pcall(function() script:setup() end)
    end
end

-- Create Script Items
local function createScriptItem(scriptData, parent)
    local item = Instance.new("Frame")
    item.Size = UDim2.new(1, 0, 0, SIZES.itemHeight)
    item.BackgroundColor3 = COLORS.itemBg
    item.BorderSizePixel = 0
    item.ZIndex = 96
    item.Parent = parent
    createCorner(item, isMobile and 4 or 5)
    
    local icon = Instance.new("TextLabel")
    icon.Size = UDim2.new(0, isMobile and 16 or 26, 0, isMobile and 16 or 26)
    icon.Position = isMobile and UDim2.new(0, 3, 0, 7) or UDim2.new(0, 6, 0, 8)
    icon.BackgroundColor3 = COLORS.primary
    icon.Text = scriptData.icon
    icon.TextScaled = true
    icon.Font = Enum.Font.GothamBold
    icon.ZIndex = 97
    icon.Parent = item
    createCorner(icon, 4)
    
    local name = Instance.new("TextLabel")
    name.Size = isMobile and UDim2.new(1, -62, 0, 10) or UDim2.new(1, -90, 0, 16)
    name.Position = isMobile and UDim2.new(0, 23, 0, 4) or UDim2.new(0, 37, 0, 6)
    name.BackgroundTransparency = 1
    name.Text = scriptData.name
    name.TextColor3 = COLORS.white
    name.Font = Enum.Font.GothamBold
    name.TextSize = isMobile and 8 or 11
    name.TextXAlignment = Enum.TextXAlignment.Left
    name.ZIndex = 97
    name.Parent = item
    
    local status = Instance.new("TextLabel")
    status.Size = isMobile and UDim2.new(1, -62, 0, 8) or UDim2.new(1, -90, 0, 12)
    status.Position = isMobile and UDim2.new(0, 23, 0, 16) or UDim2.new(0, 37, 0, 23)
    status.BackgroundTransparency = 1
    status.Text = "‚óè Disabled"
    status.TextColor3 = COLORS.gray
    status.Font = Enum.Font.Gotham
    status.TextSize = SIZES.textSmall
    status.TextXAlignment = Enum.TextXAlignment.Left
    status.ZIndex = 97
    status.Parent = item
    
    local toggle = createButton({
        Size = isMobile and UDim2.new(0, 28, 0, 14) or UDim2.new(0, 38, 0, 18),
        Position = isMobile and UDim2.new(1, -31, 0.5, -7) or UDim2.new(1, -43, 0.5, -9),
        BackgroundColor3 = Color3.fromRGB(55, 58, 63),
        Text = "",
        ZIndex = 97,
        Parent = item
    })
    createCorner(toggle, 99)
    
    local knob = Instance.new("Frame")
    knob.Size = UDim2.new(0, isMobile and 9 or 13, 0, isMobile and 9 or 13)
    knob.Position = UDim2.new(0, 2.5, 0, 2.5)
    knob.BackgroundColor3 = Color3.fromRGB(200, 200, 200)
    knob.ZIndex = 98
    knob.Parent = toggle
    createCorner(knob, 99)
    
    safeConnect(toggle.MouseButton1Click, function()
        local success, result = pcall(function() return scriptData:toggle() end)
        if success then
            local info = TweenInfo.new(0.3, Enum.EasingStyle.Quint, Enum.EasingDirection.Out)
            if result then
                TweenService:Create(toggle, info, {BackgroundColor3 = COLORS.cyan}):Play()
                TweenService:Create(knob, info, {
                    Position = UDim2.new(1, -2.5 - knob.Size.X.Offset, 0, 2.5),
                    BackgroundColor3 = COLORS.white
                }):Play()
                TweenService:Create(status, info, {TextColor3 = COLORS.cyan}):Play()
                status.Text = "‚óè Enabled"
            else
                TweenService:Create(toggle, info, {BackgroundColor3 = Color3.fromRGB(55, 58, 63)}):Play()
                TweenService:Create(knob, info, {
                    Position = UDim2.new(0, 2.5, 0, 2.5),
                    BackgroundColor3 = Color3.fromRGB(200, 200, 200)
                }):Play()
                TweenService:Create(status, info, {TextColor3 = COLORS.gray}):Play()
                status.Text = "‚óè Disabled"
            end
        end
    end)
    
    if not isMobile then
        safeConnect(item.MouseEnter, function()
            TweenService:Create(item, TweenInfo.new(0.2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), 
                {BackgroundColor3 = Color3.fromRGB(49, 52, 57)}):Play()
        end)
        
        safeConnect(item.MouseLeave, function()
            TweenService:Create(item, TweenInfo.new(0.2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), 
                {BackgroundColor3 = COLORS.itemBg}):Play()
        end)
    end
end

-- Create Categories
local activeCategory = nil

local function createCategory(catData)
    local container = Instance.new("Frame")
    container.Size = UDim2.new(1, 0, 0, SIZES.categoryHeight)
    container.BackgroundTransparency = 1
    container.ZIndex = 96
    container.Parent = scrollFrame
    
    local layout = Instance.new("UIListLayout")
    layout.Padding = UDim.new(0, isMobile and 2 or 3)
    layout.SortOrder = Enum.SortOrder.LayoutOrder
    layout.Parent = container
    
    local header = createButton({
        Size = UDim2.new(1, 0, 0, SIZES.categoryHeight),
        BackgroundColor3 = COLORS.categoryBg,
        Text = "",
        ZIndex = 96,
        LayoutOrder = 1,
        Parent = container
    })
    createCorner(header, isMobile and 5 or 6)
    
    local catIcon = Instance.new("TextLabel")
    catIcon.Size = UDim2.new(0, isMobile and 18 or 28, 0, isMobile and 18 or 28)
    catIcon.Position = isMobile and UDim2.new(0, 4, 0, 7) or UDim2.new(0, 6, 0, 8)
    catIcon.BackgroundColor3 = COLORS.primary
    catIcon.Text = catData.icon
    catIcon.TextScaled = true
    catIcon.Font = Enum.Font.GothamBold
    catIcon.ZIndex = 97
    catIcon.Parent = header
    createCorner(catIcon, 4)
    
    local catName = Instance.new("TextLabel")
    catName.Size = isMobile and UDim2.new(1, -50, 1, 0) or UDim2.new(1, -70, 1, 0)
    catName.Position = isMobile and UDim2.new(0, 26, 0, 0) or UDim2.new(0, 40, 0, 0)
    catName.BackgroundTransparency = 1
    catName.Text = catData.name
    catName.TextColor3 = COLORS.white
    catName.Font = Enum.Font.GothamBold
    catName.TextSize = isMobile and 9 or 12
    catName.TextXAlignment = Enum.TextXAlignment.Left
    catName.ZIndex = 97
    catName.Parent = header
    
    local arrow = Instance.new("TextLabel")
    arrow.Size = isMobile and UDim2.new(0, 14, 0, 14) or UDim2.new(0, 20, 0, 20)
    arrow.Position = isMobile and UDim2.new(1, -18, 0.5, -7) or UDim2.new(1, -26, 0.5, -10)
    arrow.BackgroundTransparency = 1
    arrow.Text = "‚ñ∂"
    arrow.TextColor3 = Color3.fromRGB(150, 150, 150)
    arrow.Font = Enum.Font.GothamBold
    arrow.TextSize = isMobile and 8 or 10
    arrow.ZIndex = 97
    arrow.Parent = header
    
    local scriptsContainer = Instance.new("Frame")
    scriptsContainer.Size = UDim2.new(1, 0, 0, 0)
    scriptsContainer.BackgroundTransparency = 1
    scriptsContainer.ClipsDescendants = true
    scriptsContainer.Visible = false
    scriptsContainer.ZIndex = 96
    scriptsContainer.LayoutOrder = 2
    scriptsContainer.Parent = container
    
    local scriptLayout = Instance.new("UIListLayout")
    scriptLayout.Padding = UDim.new(0, isMobile and 2 or 3)
    scriptLayout.Parent = scriptsContainer
    
    for _, script in ipairs(catData.scripts) do
        createScriptItem(script, scriptsContainer)
    end
    
    local totalHeight = (#catData.scripts * SIZES.itemHeight) + ((#catData.scripts - 1) * (isMobile and 2 or 3))
    
    local function closeCategory()
        if not catData.expanded then return end
        
        catData.expanded = false
        local info = TweenInfo.new(0.15, Enum.EasingStyle.Quint, Enum.EasingDirection.Out)
        
        TweenService:Create(scriptsContainer, info, {Size = UDim2.new(1, 0, 0, 0)}):Play()
        TweenService:Create(arrow, info, {Rotation = 0}):Play()
        TweenService:Create(arrow, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {TextColor3 = Color3.fromRGB(150, 150, 150)}):Play()
        TweenService:Create(container, info, {Size = UDim2.new(1, 0, 0, SIZES.categoryHeight)}):Play()
        task.delay(0.15, function()
            scriptsContainer.Visible = false
        end)
    end
    
    local function openCategory()
        if catData.expanded then return end
        
        catData.expanded = true
        local info = TweenInfo.new(0.35, Enum.EasingStyle.Quint, Enum.EasingDirection.Out)
        
        scriptsContainer.Visible = true
        TweenService:Create(scriptsContainer, info, {Size = UDim2.new(1, 0, 0, totalHeight)}):Play()
        TweenService:Create(arrow, info, {Rotation = 90}):Play()
        TweenService:Create(arrow, TweenInfo.new(0.25, Enum.EasingStyle.Quad), {TextColor3 = COLORS.cyan}):Play()
        TweenService:Create(container, info, {Size = UDim2.new(1, 0, 0, SIZES.categoryHeight + totalHeight + (isMobile and 2 or 3))}):Play()
    end
    
    catData.close = closeCategory
    
    safeConnect(header.MouseButton1Click, function()
        if activeCategory and activeCategory ~= catData and activeCategory.close then
            activeCategory.close()
        end
        
        if catData.expanded then
            closeCategory()
            activeCategory = nil
        else
            openCategory()
            activeCategory = catData
        end
    end)
    
    if not isMobile then
        safeConnect(header.MouseEnter, function()
            TweenService:Create(header, TweenInfo.new(0.2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), 
                {BackgroundColor3 = COLORS.itemBg}):Play()
        end)
        
        safeConnect(header.MouseLeave, function()
            TweenService:Create(header, TweenInfo.new(0.2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), 
                {BackgroundColor3 = COLORS.categoryBg}):Play()
        end)
    end
end

for _, cat in ipairs(categories) do
    createCategory(cat)
end

-- Connect Toggle and Close Buttons
safeConnect(toggleButton.MouseButton1Click, toggleMenu)
safeConnect(closeBtn.MouseButton1Click, toggleMenu)

-- Button Effects
if not isMobile then
    safeConnect(toggleButton.MouseEnter, function()
        if not menuOpen then 
            TweenService:Create(toggleButton, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                Size = UDim2.new(0, 33, 0, 33)
            }):Play()
        end
    end)
    
    safeConnect(toggleButton.MouseLeave, function()
        if not menuOpen then 
            TweenService:Create(toggleButton, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                Size = UDim2.new(0, 30, 0, 30)
            }):Play()
        end
    end)
    
    safeConnect(toggleButton.MouseButton1Down, function()
        TweenService:Create(toggleButton, TweenInfo.new(0.1, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
            Size = UDim2.new(0, isMobile and 22 or 27, 0, isMobile and 22 or 27)
        }):Play()
    end)
    
    safeConnect(toggleButton.MouseButton1Up, function()
        local targetSize = menuOpen and (isMobile and 28 or 33) or (isMobile and 25 or 30)
        TweenService:Create(toggleButton, TweenInfo.new(0.15, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {
            Size = UDim2.new(0, targetSize, 0, targetSize)
        }):Play()
    end)
end

-- Breathing Effect
local breatheStroke = Instance.new("UIStroke")
breatheStroke.Color = COLORS.secondary
breatheStroke.Thickness = 1.5
breatheStroke.Transparency = 0.5
breatheStroke.Parent = toggleButton

local breatheTween = TweenService:Create(breatheStroke, 
    TweenInfo.new(2.5, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true), 
    {Transparency = 0.15, Thickness = 2})
breatheTween:Play()

-- Cleanup System
local cleanupConnections = {}

local function cleanup()
    print("üßπ Cleaning up Script Hub...")
    
    pcall(function() breatheTween:Cancel() end)
    
    for _, cat in ipairs(categories) do
        for _, script in ipairs(cat.scripts) do
            pcall(function() script:cleanup() end)
        end
    end
    
    for _, conn in ipairs(cleanupConnections) do
        pcall(function() conn:Disconnect() end)
    end
    
    pcall(function() screenGui:Destroy() end)
    print("‚úÖ Script Hub cleaned up!")
end

table.insert(cleanupConnections, safeConnect(screenGui.AncestryChanged, function(_, parent)
    if not parent then cleanup() end
end))

table.insert(cleanupConnections, safeConnect(Players.PlayerRemoving, function(p)
    if p == LocalPlayer then cleanup() end
end))

-- Initialization
print("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
print("‚úÖ Script Hub v2.2.0 Loaded!")
print("üìç Location: StarterPlayer > StarterPlayerScripts")
print("üì± Platform: " .. (isMobile and "Mobile üì±" or "PC üíª"))
print("üóÇÔ∏è Categories: " .. #categories)
print("üéÆ Features:")
print("   ‚Ä¢ Hide Title - Hide player nametags")
print("   ‚Ä¢ Hide Players - Hide players + titles")
print("   ‚Ä¢ Hide All UI - Hide UI (keep leaderboard/chat/emotes)")
print("   ‚Ä¢ Spectator - Spectate with leaderboard visible")
print("   ‚Ä¢ Reset to Base - Teleport to basecamp + reset checkpoint")
print("üÜï v2.2.0: Added Basecamp Reset with Server sync")
print("‚ö†Ô∏è  Requires Server Script for checkpoint reset!")
print("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
